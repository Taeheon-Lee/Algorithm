"Sequential Search 순차 탐색"

# 원하는 데이터를 찾기 위해 주어진 데이터 집합의 맨 처음부터 하나씩 순차적으로 비교하는 방법
# 선형 탐색이라고 하며 키값이 주어지면 처음에 있는 데이터부터 하나씩 차례대로 비교하면서 킷값과 같은지를 탐색
# 탐색 시간이 문제의 크기에 비례하기 때문에 탐색 대상이 큰 경우 효율이 나쁨
# 시간 복잡도는 리스트의 크기만큼 탐색하기 때문에 평균 O(n)

# int 배열 list의 순차 탐색

def seq_search(lst, key):
    for i in range(len(lst)):
        if lst[i] == key:
            return i                        # 순차적으로 탐색하여 탐색에 성공하면 키값의 인덱스(위치) 반환
    return -1                               # 탐색에 실패하면 -1을 반환

lst = list(map(int, input().split()))       # key를 탐색할 리스트 입력
key = int(input())                          # key 입력
loc = seq_search(lst, key)                  # 순차 탐색 실행
print("not exist" if loc == -1 else loc)    # 결과 출력

# 순차 탐색의 개선 방법은 2가지 정도를 볼 수 있음
# 1) 탐색된 값을 리스트의 가장 앞으로 이동시켜 향후 탐색을 빠르게 할 수 있도록 개선
# -> 이는 이전에 한번 이상 탐색된 값을 빠르게 찾을 수 있는 장점이 있으나, 탐색이 되지 않은 값은 뒤쪽으로 모이게 되는 지역성(locality)의 문제점이 존재
# 2) 탐색된 값을 해당 위치의 직전 위치로 이동시키는 방법
# -> 이는 자주 특정 값이 탐색될수록 빠르게 탐색 해당 값을 탐색할 수 있고, 지역성의 문제도 어느정도 해결 가능
# 개선 방법을 사용해도 여전히 데이터가 큰 경우 탐색효율이 좋지는 못함